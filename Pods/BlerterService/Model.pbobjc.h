// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Model.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Health;
@class Safety;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - ModelRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ModelRoot : GPBRootObject
@end

#pragma mark - Id

typedef GPB_ENUM(Id_FieldNumber) {
  Id_FieldNumber_Id_p = 1,
};

@interface Id : GPBMessage

@property(nonatomic, readwrite) int64_t id_p;

@end

#pragma mark - Response

typedef GPB_ENUM(Response_FieldNumber) {
  Response_FieldNumber_ResponseCode = 1,
  Response_FieldNumber_Info = 2,
  Response_FieldNumber_HealthArray = 3,
  Response_FieldNumber_Data_p = 4,
};

@interface Response : GPBMessage

@property(nonatomic, readwrite) int32_t responseCode;

@property(nonatomic, readwrite, copy, null_resettable) NSString *info;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Health*> *healthArray;
/** The number of items in @c healthArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger healthArray_Count;

@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;

@end

#pragma mark - InternalRequest

typedef GPB_ENUM(InternalRequest_FieldNumber) {
  InternalRequest_FieldNumber_Data_p = 1,
};

@interface InternalRequest : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;

@end

#pragma mark - Health

typedef GPB_ENUM(Health_FieldNumber) {
  Health_FieldNumber_Id_p = 1,
  Health_FieldNumber_Name = 2,
  Health_FieldNumber_Description_p = 3,
  Health_FieldNumber_SafetyArray = 4,
};

@interface Health : GPBMessage

@property(nonatomic, readwrite) int64_t id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Safety*> *safetyArray;
/** The number of items in @c safetyArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger safetyArray_Count;

@end

#pragma mark - Safety

typedef GPB_ENUM(Safety_FieldNumber) {
  Safety_FieldNumber_Id_p = 1,
  Safety_FieldNumber_Name = 2,
  Safety_FieldNumber_Description_p = 3,
  Safety_FieldNumber_IsActive = 4,
};

@interface Safety : GPBMessage

@property(nonatomic, readwrite) int64_t id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

@property(nonatomic, readwrite) BOOL isActive;

@end

#pragma mark - Token

typedef GPB_ENUM(Token_FieldNumber) {
  Token_FieldNumber_Token = 1,
  Token_FieldNumber_UserId = 2,
};

@interface Token : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *token;

@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

@end

#pragma mark - Empty

@interface Empty : GPBMessage

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
